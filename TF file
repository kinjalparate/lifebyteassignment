terraform
{
# Specify the region in which we would want to deploy our stack
variable "region" {
  default = "ap-south-1"
}

# Specify 3 availability zones from the region
variable "availability_zones" {
  default = ["ap-south-1a", "ap-south-1b", "ap-south-1c"]
}

terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 4.33.0"
      configuration_aliases = [ aws.alternate ]
    }
  }
}

# Configure the AWS Provider
provider "aws" {
  region = var.region
}

# Create a VPC
resource "aws_vpc" "my_vpc" {
  cidr_block = "10.0.0.0/16"

  tags = {
    Name = "my_vpc"
  }
}

# Create a subnet in each availability zone in the VPC. Keep in mind that at this point these subnets are private without internet access. They would need other networking resources for making them accesible
resource "aws_subnet" "my_subnet" {
  count             = length(var.availability_zones)
  vpc_id            = aws_vpc.my_vpc.id
  cidr_block        = cidrsubnet("10.0.0.0/16", 8, count.index)
  availability_zone = var.availability_zones[count.index]

  tags = {
    Name = "my-subnet-${count.index}"
  }
}

# Put an instance in each subnet
resource "aws_instance" "foo" {
  count         = length(var.availability_zones)
  ami           = "ami-062df10d14676e201"
  instance_type = "t2.micro"
  subnet_id     = aws_subnet.my_subnet[count.index].id

  tags = {
    Name = "trial-${count.index}"
  }
}

# Put apllication load balancer 

# Automate the webservers deploy

# Healthcheck of servers 

# Redirect HTTP to HTTPS using listeners

}
